From 83460b316515224c0d35f69ba9cd330c22772e3e Mon Sep 17 00:00:00 2001
From: myfreeer <myfreeer@users.noreply.github.com>
Date: Mon, 4 Nov 2019 21:44:10 +0800
Subject: [PATCH] ngx_files: implement some functions in utf8 encoding

* ngx_getcwd
* ngx_create_dir
* ngx_delete_dir
* ngx_delete_file
* ngx_rename_file

nginx would initially run in non-ascii dir.
---
 src/os/win32/ngx_files.c | 140 +++++++++++++++++++++++++++++++++++++++
 src/os/win32/ngx_files.h |  24 +++----
 2 files changed, 150 insertions(+), 14 deletions(-)

diff --git a/src/os/win32/ngx_files.c b/src/os/win32/ngx_files.c
index f2d07e1..fc69e6d 100644
--- a/src/os/win32/ngx_files.c
+++ b/src/os/win32/ngx_files.c
@@ -301,6 +301,146 @@ failed:
     return rc;
 }
 
+ngx_int_t
+ngx_getcwd(u_char *buf, ngx_int_t size)
+{
+    WCHAR wBuffer[NGX_MAX_PATH];
+    ngx_int_t ret = GetCurrentDirectoryW(NGX_MAX_PATH, wBuffer);
+    if (ret == 0) {
+      return 0;
+    }
+    return WideCharToMultiByte(CP_UTF8, 0, wBuffer, -1, (char *) buf, size, NULL, NULL);
+}
+
+ngx_int_t
+ngx_create_dir(u_char *name, ngx_int_t access)
+{
+    size_t                      len;
+    long                        rc;
+    u_short                    *u;
+    ngx_err_t                   err;
+    u_short                     utf16[NGX_UTF16_BUFLEN];
+
+    len = NGX_UTF16_BUFLEN;
+
+    u = ngx_utf8_to_utf16(utf16, name, &len);
+
+    if (u == NULL) {
+      return NGX_FILE_ERROR;
+    }
+
+    rc = CreateDirectoryW((const WCHAR *)u, NULL);
+
+    if (u != utf16) {
+        err = ngx_errno;
+        ngx_free(u);
+        ngx_set_errno(err);
+    }
+
+    return rc;
+}
+
+ngx_int_t
+ngx_delete_dir(u_char *name)
+{
+    size_t                      len;
+    long                        rc;
+    u_short                    *u;
+    ngx_err_t                   err;
+    u_short                     utf16[NGX_UTF16_BUFLEN];
+
+    len = NGX_UTF16_BUFLEN;
+
+    u = ngx_utf8_to_utf16(utf16, name, &len);
+
+    if (u == NULL) {
+      return NGX_FILE_ERROR;
+    }
+
+    rc = RemoveDirectoryW((const WCHAR *)u);
+
+    if (u != utf16) {
+        err = ngx_errno;
+        ngx_free(u);
+        ngx_set_errno(err);
+    }
+
+    return rc;
+}
+
+ngx_int_t
+ngx_delete_file(u_char *name)
+{
+    size_t                      len;
+    long                        rc;
+    u_short                    *u;
+    ngx_err_t                   err;
+    u_short                     utf16[NGX_UTF16_BUFLEN];
+
+    len = NGX_UTF16_BUFLEN;
+
+    u = ngx_utf8_to_utf16(utf16, name, &len);
+
+    if (u == NULL) {
+      return NGX_FILE_ERROR;
+    }
+
+    rc = DeleteFileW((const WCHAR *)u);
+
+    if (u != utf16) {
+        err = ngx_errno;
+        ngx_free(u);
+        ngx_set_errno(err);
+    }
+
+    return rc;
+}
+
+ngx_int_t
+ngx_rename_file(u_char *o, u_char *n)
+{
+    size_t                      len1;
+    size_t                      len2;
+    long                        rc;
+    u_short                    *u1;
+    u_short                    *u2;
+    ngx_err_t                   err;
+    u_short                     utf16_1[NGX_UTF16_BUFLEN];
+    u_short                     utf16_2[NGX_UTF16_BUFLEN];
+
+    len1 = NGX_UTF16_BUFLEN;
+    len2 = NGX_UTF16_BUFLEN;
+
+    u1 = ngx_utf8_to_utf16(utf16_1, o, &len1);
+
+    if (u1 == NULL) {
+        return NGX_FILE_ERROR;
+    }
+
+    rc = NGX_FILE_ERROR;
+    u2 = ngx_utf8_to_utf16(utf16_2, n, &len2);
+
+    if (u2 == NULL) {
+        goto fail1;
+    }
+
+    rc = MoveFileW((const WCHAR *) u1, (const WCHAR *) u2);
+
+    if (u2 != utf16_2) {
+        err = ngx_errno;
+        ngx_free(u2);
+        ngx_set_errno(err);
+    }
+
+fail1:
+    if (u1 != utf16_1) {
+        err = ngx_errno;
+        ngx_free(u1);
+        ngx_set_errno(err);
+    }
+
+    return rc;
+}
 
 ngx_int_t
 ngx_set_file_time(u_char *name, ngx_fd_t fd, time_t s)
diff --git a/src/os/win32/ngx_files.h b/src/os/win32/ngx_files.h
index 57bfe7e..441a9a1 100644
--- a/src/os/win32/ngx_files.h
+++ b/src/os/win32/ngx_files.h
@@ -120,13 +120,11 @@ ssize_t ngx_write_console(ngx_fd_t fd, void *buf, size_t size);
 #define NGX_LINEFEED_SIZE           2
 #define NGX_LINEFEED                CRLF
 
+ngx_int_t ngx_delete_file(u_char *name);
+#define ngx_delete_file_n           "DeleteFileW()"
 
-#define ngx_delete_file(name)       DeleteFile((const char *) name)
-#define ngx_delete_file_n           "DeleteFile()"
-
-
-#define ngx_rename_file(o, n)       MoveFile((const char *) o, (const char *) n)
-#define ngx_rename_file_n           "MoveFile()"
+ngx_int_t ngx_rename_file(u_char *o, u_char *n);
+#define ngx_rename_file_n           "MoveFileW()"
 ngx_err_t ngx_win32_rename_file(ngx_str_t *from, ngx_str_t *to, ngx_log_t *log);
 
 
@@ -176,8 +174,8 @@ void ngx_close_file_mapping(ngx_file_mapping_t *fm);
 
 u_char *ngx_realpath(u_char *path, u_char *resolved);
 #define ngx_realpath_n              ""
-#define ngx_getcwd(buf, size)       GetCurrentDirectory(size, (char *) buf)
-#define ngx_getcwd_n                "GetCurrentDirectory()"
+ngx_int_t ngx_getcwd(u_char *buf, ngx_int_t size);
+#define ngx_getcwd_n                "GetCurrentDirectoryW()"
 #define ngx_path_separator(c)       ((c) == '/' || (c) == '\\')
 
 #define NGX_HAVE_MAX_PATH           1
@@ -195,13 +193,11 @@ ngx_int_t ngx_read_dir(ngx_dir_t *dir);
 ngx_int_t ngx_close_dir(ngx_dir_t *dir);
 #define ngx_close_dir_n             "FindClose()"
 
+ngx_int_t ngx_create_dir(u_char *name, ngx_int_t access);
+#define ngx_create_dir_n            "CreateDirectoryW()"
 
-#define ngx_create_dir(name, access) CreateDirectory((const char *) name, NULL)
-#define ngx_create_dir_n            "CreateDirectory()"
-
-
-#define ngx_delete_dir(name)        RemoveDirectory((const char *) name)
-#define ngx_delete_dir_n            "RemoveDirectory()"
+ngx_int_t ngx_delete_dir(u_char *name);
+#define ngx_delete_dir_n            "RemoveDirectoryW()"
 
 
 #define ngx_dir_access(a)           (a)
-- 
2.23.0

