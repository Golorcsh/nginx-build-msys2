From b4325a4737837e20e1c11adf667bc8687ebbb11a Mon Sep 17 00:00:00 2001
From: myfreeer <myfreeer@users.noreply.github.com>
Date: Fri, 20 Jul 2018 10:10:18 +0800
Subject: [PATCH] autoindex: add escaping directive

Syntax:   autoindex_escape_href on | off;
Default:  autoindex_escape_href on;
Context:  http, server, location

For the HTML format, specifies whether href attribute should be escaped.
---
 src/http/modules/ngx_http_autoindex_module.c | 25 +++++++++++++++-----
 1 file changed, 19 insertions(+), 6 deletions(-)

diff --git a/src/http/modules/ngx_http_autoindex_module.c b/src/http/modules/ngx_http_autoindex_module.c
index 94b91db..da7adae 100644
--- a/src/http/modules/ngx_http_autoindex_module.c
+++ b/src/http/modules/ngx_http_autoindex_module.c
@@ -42,9 +42,9 @@ typedef struct {
     ngx_uint_t     format;
     ngx_flag_t     localtime;
     ngx_flag_t     exact_size;
+    ngx_flag_t     escape_href;
 } ngx_http_autoindex_loc_conf_t;
 
-
 #define NGX_HTTP_AUTOINDEX_HTML         0
 #define NGX_HTTP_AUTOINDEX_JSON         1
 #define NGX_HTTP_AUTOINDEX_JSONP        2
@@ -114,6 +114,13 @@ static ngx_command_t  ngx_http_autoindex_commands[] = {
       offsetof(ngx_http_autoindex_loc_conf_t, exact_size),
       NULL },
 
+    { ngx_string("autoindex_escape_href"),
+      NGX_HTTP_MAIN_CONF|NGX_HTTP_SRV_CONF|NGX_HTTP_LOC_CONF|NGX_CONF_FLAG,
+      ngx_conf_set_flag_slot,
+      NGX_HTTP_LOC_CONF_OFFSET,
+      offsetof(ngx_http_autoindex_loc_conf_t, escape_href),
+      NULL },
+
       ngx_null_command
 };
 
@@ -485,12 +492,17 @@ ngx_http_autoindex_html(ngx_http_request_t *r, ngx_array_t *entries)
           + sizeof("</pre><hr>") - 1
           + sizeof(tail) - 1;
 
+    alcf = ngx_http_get_module_loc_conf(r, ngx_http_autoindex_module);
+
     entry = entries->elts;
     for (i = 0; i < entries->nelts; i++) {
-        entry[i].escape = 2 * ngx_escape_uri(NULL, entry[i].name.data,
-                                             entry[i].name.len,
-                                             NGX_ESCAPE_URI_COMPONENT);
-
+        if (alcf->escape_href) {
+            entry[i].escape = 2 * ngx_escape_uri(NULL, entry[i].name.data,
+                                                    entry[i].name.len,
+                                                    NGX_ESCAPE_URI_COMPONENT);
+        } else {
+            entry[i].escape = 0;
+        }
         entry[i].escape_html = ngx_escape_html(NULL, entry[i].name.data,
                                                entry[i].name.len);
 
@@ -537,7 +549,6 @@ ngx_http_autoindex_html(ngx_http_request_t *r, ngx_array_t *entries)
     b->last = ngx_cpymem(b->last, "<hr><pre><a href=\"../\">../</a>" CRLF,
                          sizeof("<hr><pre><a href=\"../\">../</a>" CRLF) - 1);
 
-    alcf = ngx_http_get_module_loc_conf(r, ngx_http_autoindex_module);
     tp = ngx_timeofday();
 
     for (i = 0; i < entries->nelts; i++) {
@@ -1016,6 +1027,7 @@ ngx_http_autoindex_create_loc_conf(ngx_conf_t *cf)
     conf->format = NGX_CONF_UNSET_UINT;
     conf->localtime = NGX_CONF_UNSET;
     conf->exact_size = NGX_CONF_UNSET;
+    conf->escape_href = NGX_CONF_UNSET;
 
     return conf;
 }
@@ -1032,6 +1044,7 @@ ngx_http_autoindex_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
                               NGX_HTTP_AUTOINDEX_HTML);
     ngx_conf_merge_value(conf->localtime, prev->localtime, 0);
     ngx_conf_merge_value(conf->exact_size, prev->exact_size, 1);
+    ngx_conf_merge_value(conf->escape_href, prev->escape_href, 1);
 
     return NGX_CONF_OK;
 }
-- 
2.18.0

