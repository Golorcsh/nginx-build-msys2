From 3e6a8cbee0f585286940120a0e3feec9fe3bad7a Mon Sep 17 00:00:00 2001
From: myfreeer <myfreeer@users.noreply.github.com>
Date: Sun, 30 Dec 2018 20:40:21 +0800
Subject: [PATCH] win32: force utf-8 encoding in ngx_dir_t

---
 src/os/win32/ngx_files.c | 27 ++++++++++++++++++++++-----
 src/os/win32/ngx_files.h |  8 +++++---
 2 files changed, 27 insertions(+), 8 deletions(-)

diff --git a/src/os/win32/ngx_files.c b/src/os/win32/ngx_files.c
index 0b131b5..f2d07e1 100644
--- a/src/os/win32/ngx_files.c
+++ b/src/os/win32/ngx_files.c
@@ -429,6 +429,9 @@ ngx_open_dir(ngx_str_t *name, ngx_dir_t *dir)
 {
     u_char     *pattern, *p;
     ngx_err_t   err;
+    size_t      len;
+    u_short    *u;
+    u_short     utf16[NGX_UTF16_BUFLEN];
 
     pattern = malloc(name->len + 3);
     if (pattern == NULL) {
@@ -436,21 +439,30 @@ ngx_open_dir(ngx_str_t *name, ngx_dir_t *dir)
     }
 
     p = ngx_cpymem(pattern, name->data, name->len);
-
     *p++ = '/';
     *p++ = '*';
     *p = '\0';
 
-    dir->dir = FindFirstFile((const char *) pattern, &dir->finddata);
+    len = NGX_UTF16_BUFLEN;
+    u = ngx_utf8_to_utf16(utf16, pattern, &len);
+    ngx_free(pattern);
+    if (u == NULL) {
+        return NGX_ERROR;
+    }
 
+    dir->dir = FindFirstFileW((LPCWSTR) u, &dir->finddata);
+    if (u != utf16) {
+        ngx_free(u);
+    }
     if (dir->dir == INVALID_HANDLE_VALUE) {
         err = ngx_errno;
-        ngx_free(pattern);
         ngx_set_errno(err);
         return NGX_ERROR;
     }
 
-    ngx_free(pattern);
+    dir->utf8_length = WideCharToMultiByte(CP_UTF8, 0, dir->finddata.cFileName, -1, NULL, 0, NULL, NULL);
+    dir->utf8 = calloc(dir->utf8_length, sizeof(char));
+    WideCharToMultiByte(CP_UTF8, 0, dir->finddata.cFileName, -1, dir->utf8, dir->utf8_length, NULL, NULL);
 
     dir->valid_info = 1;
     dir->ready = 1;
@@ -467,8 +479,12 @@ ngx_read_dir(ngx_dir_t *dir)
         return NGX_OK;
     }
 
-    if (FindNextFile(dir->dir, &dir->finddata) != 0) {
+    if (FindNextFileW(dir->dir, &dir->finddata) != 0) {
         dir->type = 1;
+        free(dir->utf8);
+        dir->utf8_length = WideCharToMultiByte(CP_UTF8, 0, dir->finddata.cFileName, -1, NULL, 0, NULL, NULL);
+        dir->utf8 = calloc(dir->utf8_length, sizeof(char));
+        WideCharToMultiByte(CP_UTF8, 0, dir->finddata.cFileName, -1, dir->utf8, dir->utf8_length, NULL, NULL);
         return NGX_OK;
     }
 
@@ -479,6 +495,7 @@ ngx_read_dir(ngx_dir_t *dir)
 ngx_int_t
 ngx_close_dir(ngx_dir_t *dir)
 {
+    free(dir->utf8);
     if (FindClose(dir->dir) == 0) {
         return NGX_ERROR;
     }
diff --git a/src/os/win32/ngx_files.h b/src/os/win32/ngx_files.h
index 6eb720e..57bfe7e 100644
--- a/src/os/win32/ngx_files.h
+++ b/src/os/win32/ngx_files.h
@@ -30,7 +30,9 @@ typedef struct {
 
 typedef struct {
     HANDLE                          dir;
-    WIN32_FIND_DATA                 finddata;
+    WIN32_FIND_DATAW                finddata;
+    char*                           utf8;
+    int                             utf8_length;
 
     unsigned                        valid_info:1;
     unsigned                        type:1;
@@ -205,8 +207,8 @@ ngx_int_t ngx_close_dir(ngx_dir_t *dir);
 #define ngx_dir_access(a)           (a)
 
 
-#define ngx_de_name(dir)            ((u_char *) (dir)->finddata.cFileName)
-#define ngx_de_namelen(dir)         ngx_strlen((dir)->finddata.cFileName)
+#define ngx_de_name(dir)            ((u_char *) (dir)->utf8)
+#define ngx_de_namelen(dir)         ((dir)->utf8_length - 1)
 
 ngx_int_t ngx_de_info(u_char *name, ngx_dir_t *dir);
 #define ngx_de_info_n               "dummy()"
-- 
2.19.1

